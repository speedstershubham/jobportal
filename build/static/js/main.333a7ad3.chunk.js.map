{"version":3,"sources":["useFetchJobs.js","Job.js","JobsPagination.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","classNmae","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelToken2","length","cancel","useFetchJobs","Container","param","target","prevParams","map","Key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.333a7ad3.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST:'make-request',\r\n    GET_DATA:'get-data',\r\n    ERROR:'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\r\n}\r\n\r\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\r\n\r\nfunction reducer(state,action){\r\nswitch(action.type){\r\n\r\n    case ACTIONS.MAKE_REQUEST:\r\n        return { loading: true, jobs: []}\r\n\r\n    case ACTIONS.GET_DATA:\r\n        return{ ...state, loading: false, jobs: action.payload.jobs }\r\n        case ACTIONS.ERROR:\r\n            return { ...state,loading: false, error: action.payload.error,jobs: [] }\r\n            case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n                return {...state, hasNextPage: action.payload.hasNextPage}\r\n            default:\r\n                return state\r\n}\r\n}\r\n\r\nexport default function useFetchJobs(params,page){\r\n    const [state,dispatch ]= useReducer(reducer,{ jobs: [], loading: true})\r\n \r\n    useEffect(() => {\r\n     const cancelToken1 = axios.CancelToken.source()\r\n     dispatch({ type: ACTIONS.MAKE_REQUEST})\r\n     axios.get(BASE_URL,{\r\n         cancelToken: cancelToken1.token,\r\n         params: {markdown: true, page: page, ...params }\r\n     }).then(res => {\r\n        dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } })\r\n    }).catch(e => {\r\n        if (axios.isCancel(e)) return \r\n        dispatch({ type: ACTIONS.ERROR, payload: { error: e } })\r\n\r\n    })\r\n    const cancelToken2 = axios.CancelToken.source()\r\n    axios.get(BASE_URL,{\r\n        cancelToken: cancelToken2.token,\r\n        params: {markdown: true, page: page + 1, ...params }\r\n    }).then(res => {\r\n       dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: {hasNextPage:res.data.length !== 0 }})\r\n   }).catch(e => {\r\n       if (axios.isCancel(e)) return \r\n       dispatch({ type: ACTIONS.ERROR, payload: { error: e } })\r\n\r\n   })\r\n\r\n    return () => {\r\n        cancelToken1.cancel()\r\n        cancelToken2.cancel()\r\n    }\r\n\r\n }, [params,page])\r\n\r\n    return state\r\n}  ","import React ,{useState} from 'react'\r\nimport { Card , Badge ,Button, Collapse} from 'react-bootstrap'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default function Job({ job }) {\r\n    const [open,setOpen] = useState(false)\r\n    return (\r\n        <Card className=\"mb-3\">\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between\" >\r\n                    <div>\r\n                    <Card.Title>\r\n                        {job.title} - <span className=\"text-muted font-weight-light\">\r\n                            {job.company}\r\n                        </span>\r\n                    </Card.Title>\r\n                    <Card.Subtitle classNmae=\"text-muted mb-2\">\r\n                        {new Date(job.created_at).toLocaleDateString()}\r\n                    </Card.Subtitle>\r\n                    <Badge variant=\"secondary\" className=\"mr-2\">{job.type}</Badge>\r\n                    <Badge variant=\"secondary\">{job.location}</Badge>\r\n                   <div style={{ wordBreak: 'break-all'}}>\r\n                       <ReactMarkdown source={job.how_to_apply} />\r\n                   </div>\r\n                    </div>\r\n                <img className=\"d-none d-md-block\" height=\"50\" alt={job.company} src={job.company_logo} />\r\n                </div>\r\n           <Card.Text>\r\n               <Button \r\n               onClick={() => setOpen(prevOpen => !prevOpen)}\r\n               variant=\"primary\">\r\n                {open ? 'Hide Details' : 'View Details'} \r\n                   </Button>\r\n           </Card.Text>\r\n           <Collapse in={open}>\r\n           <div className=\"mt-4\">\r\n               <ReactMarkdown source={job.description} />\r\n        </div>\r\n        </Collapse>\r\n            </Card.Body>\r\n        </Card>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nexport default function JobsPagination({ page, setPage , hasNextPage}) {\r\n    function adjustPage(amount){\r\n        setPage(prevPage => prevPage + amount)\r\n    }\r\n    \r\n    return (\r\n    <Pagination>\r\n        {page !== 1 && <Pagination.Prev onClick ={() => adjustPage(-1)} />}\r\n    {page !== 1 && <Pagination.Item onClick ={() => setPage(1)}>1 </Pagination.Item> }\r\n    {page > 2 &&  <Pagination.Ellipsis /> }\r\n    {page > 2 && <Pagination.Item onClick ={() => adjustPage(-1)}>{page - 1}</Pagination.Item> }\r\n        <Pagination.Item active>{page }</Pagination.Item>\r\n    {hasNextPage && <Pagination.Item onClick ={() => adjustPage(1)}>{page + 1}</Pagination.Item> }\r\n    {hasNextPage &&  <Pagination.Next onClick ={() => adjustPage(1)} /> }\r\n    </Pagination>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Form, Col } from 'react-bootstrap'  \r\n\r\nexport default function SearchForm({params ,onParamChange}) {\r\n    return (\r\n       <Form className=\"mb-4\">\r\n           <Form.Row className=\"align-items-end\">\r\n<Form.Group as={Col} >\r\n    <Form.Label>Description</Form.Label>\r\n    <Form.Control onChange={onParamChange} value=\r\n    {params.description} name=\"description\" type=\"text\" />\r\n</Form.Group>\r\n<Form.Group as={Col} >\r\n    <Form.Label>Location</Form.Label>\r\n    <Form.Control onChange={onParamChange} value=\r\n    {params.location} name=\"location\" type=\"text\" />\r\n</Form.Group>\r\n<Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n    <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full-time\" label=\"Only full time\" type=\"checkbox\" className=\"mb-2\" />\r\n</Form.Group>\r\n           </Form.Row>\r\n       </Form>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport useFetchJobs from './useFetchJobs'\nimport { Container } from 'react-bootstrap'\nimport Job from './Job'\nimport JobsPagination from './JobsPagination'\nimport SearchForm from './SearchForm';\n\nfunction App() {\nconst [params, setParams] = useState({})\nconst [page, setPage] = useState(1)\n  const { jobs,loading,error , hasNextPage}   = useFetchJobs(params, page)\n\n  function handleParamChange(e) {\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return { ...prevParams,[param]: value}\n    })\n  }\n\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\">GitHub Jobs</h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobsPagination page={page} setPage={setPage}  hasNextPage={hasNextPage} />\n      {loading && <h1>Loading...</h1>}\n      {error && <h1>Error. Try refreshing.</h1>}\n    {jobs.map(job => {\n      return <Job Key={job.id} job={job} />\n    })}\n\n      <JobsPagination page={page} setPage={setPage}  hasNextPage={hasNextPage}/>\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}